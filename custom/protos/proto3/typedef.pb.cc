// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto3/typedef.proto

#include "proto3/typedef.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR Led_t::Led_t(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mac_)*/uint64_t{0u}
  , /*decltype(_impl_.ep_)*/0u
  , /*decltype(_impl_.status_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Led_tDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Led_tDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Led_tDefaultTypeInternal() {}
  union {
    Led_t _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Led_tDefaultTypeInternal _Led_t_default_instance_;
PROTOBUF_CONSTEXPR Sw_t::Sw_t(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mac_)*/uint64_t{0u}
  , /*decltype(_impl_.ep_)*/0u
  , /*decltype(_impl_.status_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Sw_tDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Sw_tDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Sw_tDefaultTypeInternal() {}
  union {
    Sw_t _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Sw_tDefaultTypeInternal _Sw_t_default_instance_;
PROTOBUF_CONSTEXPR Ota_t::Ota_t(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.check_ota_)*/false
  , /*decltype(_impl_.status_)*/false
  , /*decltype(_impl_.ack_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Ota_tDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Ota_tDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Ota_tDefaultTypeInternal() {}
  union {
    Ota_t _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Ota_tDefaultTypeInternal _Ota_t_default_instance_;
PROTOBUF_CONSTEXPR KeepAlive_t::KeepAlive_t(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sender_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct KeepAlive_tDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KeepAlive_tDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~KeepAlive_tDefaultTypeInternal() {}
  union {
    KeepAlive_t _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KeepAlive_tDefaultTypeInternal _KeepAlive_t_default_instance_;
PROTOBUF_CONSTEXPR Timer_t::Timer_t(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.day_)*/0u
  , /*decltype(_impl_.month_)*/0u
  , /*decltype(_impl_.hour_)*/0u
  , /*decltype(_impl_.minute_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Timer_tDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Timer_tDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Timer_tDefaultTypeInternal() {}
  union {
    Timer_t _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Timer_tDefaultTypeInternal _Timer_t_default_instance_;
PROTOBUF_CONSTEXPR Buffer::Buffer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.led_)*/{}
  , /*decltype(_impl_.sw_)*/{}
  , /*decltype(_impl_.mac_hub_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ota_)*/nullptr
  , /*decltype(_impl_.vpn_)*/nullptr
  , /*decltype(_impl_.time_)*/nullptr
  , /*decltype(_impl_.sender_)*/0
  , /*decltype(_impl_.receiver_)*/0
  , /*decltype(_impl_.cotroller_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BufferDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BufferDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BufferDefaultTypeInternal() {}
  union {
    Buffer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BufferDefaultTypeInternal _Buffer_default_instance_;
PROTOBUF_CONSTEXPR Vpn_t::Vpn_t(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.mac_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Vpn_tDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Vpn_tDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Vpn_tDefaultTypeInternal() {}
  union {
    Vpn_t _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Vpn_tDefaultTypeInternal _Vpn_t_default_instance_;
PROTOBUF_CONSTEXPR Vendor_t::Vendor_t(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.mac_ven_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Vendor_tDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Vendor_tDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Vendor_tDefaultTypeInternal() {}
  union {
    Vendor_t _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Vendor_tDefaultTypeInternal _Vendor_t_default_instance_;
static ::_pb::Metadata file_level_metadata_proto3_2ftypedef_2eproto[8];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_proto3_2ftypedef_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_proto3_2ftypedef_2eproto = nullptr;

const uint32_t TableStruct_proto3_2ftypedef_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Led_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Led_t, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::Led_t, _impl_.mac_),
  PROTOBUF_FIELD_OFFSET(::Led_t, _impl_.ep_),
  PROTOBUF_FIELD_OFFSET(::Led_t, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Sw_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Sw_t, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::Sw_t, _impl_.ep_),
  PROTOBUF_FIELD_OFFSET(::Sw_t, _impl_.mac_),
  PROTOBUF_FIELD_OFFSET(::Sw_t, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Ota_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Ota_t, _impl_.check_ota_),
  PROTOBUF_FIELD_OFFSET(::Ota_t, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::Ota_t, _impl_.ack_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KeepAlive_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KeepAlive_t, _impl_.sender_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Timer_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Timer_t, _impl_.day_),
  PROTOBUF_FIELD_OFFSET(::Timer_t, _impl_.month_),
  PROTOBUF_FIELD_OFFSET(::Timer_t, _impl_.hour_),
  PROTOBUF_FIELD_OFFSET(::Timer_t, _impl_.minute_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Buffer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Buffer, _impl_.mac_hub_),
  PROTOBUF_FIELD_OFFSET(::Buffer, _impl_.sender_),
  PROTOBUF_FIELD_OFFSET(::Buffer, _impl_.receiver_),
  PROTOBUF_FIELD_OFFSET(::Buffer, _impl_.cotroller_),
  PROTOBUF_FIELD_OFFSET(::Buffer, _impl_.ota_),
  PROTOBUF_FIELD_OFFSET(::Buffer, _impl_.vpn_),
  PROTOBUF_FIELD_OFFSET(::Buffer, _impl_.led_),
  PROTOBUF_FIELD_OFFSET(::Buffer, _impl_.sw_),
  PROTOBUF_FIELD_OFFSET(::Buffer, _impl_.time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Vpn_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Vpn_t, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::Vpn_t, _impl_.mac_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Vendor_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Vendor_t, _impl_.mac_ven_),
  PROTOBUF_FIELD_OFFSET(::Vendor_t, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::Vendor_t, _impl_.status_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Led_t)},
  { 10, -1, -1, sizeof(::Sw_t)},
  { 20, -1, -1, sizeof(::Ota_t)},
  { 29, -1, -1, sizeof(::KeepAlive_t)},
  { 36, -1, -1, sizeof(::Timer_t)},
  { 46, -1, -1, sizeof(::Buffer)},
  { 61, -1, -1, sizeof(::Vpn_t)},
  { 69, -1, -1, sizeof(::Vendor_t)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_Led_t_default_instance_._instance,
  &::_Sw_t_default_instance_._instance,
  &::_Ota_t_default_instance_._instance,
  &::_KeepAlive_t_default_instance_._instance,
  &::_Timer_t_default_instance_._instance,
  &::_Buffer_default_instance_._instance,
  &::_Vpn_t_default_instance_._instance,
  &::_Vendor_t_default_instance_._instance,
};

const char descriptor_table_protodef_proto3_2ftypedef_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024proto3/typedef.proto\">\n\005Led_t\022\014\n\004name\030"
  "\020 \001(\t\022\013\n\003mac\030\021 \001(\004\022\n\n\002ep\030\022 \001(\r\022\016\n\006status"
  "\030\023 \001(\010\"=\n\004Sw_t\022\014\n\004name\030\020 \001(\t\022\n\n\002ep\030\021 \001(\r"
  "\022\013\n\003mac\030\022 \001(\004\022\016\n\006status\030\023 \001(\010\"7\n\005Ota_t\022\021"
  "\n\tcheck_ota\030\020 \001(\010\022\016\n\006status\030\021 \001(\010\022\013\n\003ack"
  "\030\022 \001(\010\"&\n\013KeepAlive_t\022\027\n\006sender\030\001 \001(\0162\007."
  "User_t\"C\n\007Timer_t\022\013\n\003day\030\017 \001(\r\022\r\n\005month\030"
  "\020 \001(\r\022\014\n\004hour\030\021 \001(\r\022\016\n\006minute\030\022 \001(\r\"\323\001\n\006"
  "Buffer\022\017\n\007mac_hub\030\001 \001(\t\022\027\n\006sender\030\002 \001(\0162"
  "\007.User_t\022\031\n\010receiver\030\003 \001(\0162\007.User_t\022\032\n\tc"
  "otroller\030\004 \001(\0162\007.User_t\022\023\n\003ota\030\020 \001(\0132\006.O"
  "ta_t\022\023\n\003vpn\030\021 \001(\0132\006.Vpn_t\022\023\n\003led\030\022 \003(\0132\006"
  ".Led_t\022\021\n\002sw\030\023 \003(\0132\005.Sw_t\022\026\n\004time\030\024 \001(\0132"
  "\010.Timer_t\"$\n\005Vpn_t\022\016\n\006status\030\001 \001(\010\022\013\n\003ma"
  "c\030\002 \001(\t\"9\n\010Vendor_t\022\017\n\007mac_ven\030\001 \001(\t\022\014\n\004"
  "data\030\002 \001(\t\022\016\n\006status\030\003 \001(\010*b\n\006User_t\022\007\n\003"
  "App\020\000\022\n\n\006Server\020\001\022\007\n\003Hub\020\002\022\n\n\006Zigbee\020\003\022\007"
  "\n\003Ble\020\004\022\006\n\002Ai\020\005\022\010\n\004Wifi\020\006\022\n\n\006Screen\020\007\022\007\n"
  "\003Ota\020\010b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_proto3_2ftypedef_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_proto3_2ftypedef_2eproto = {
    false, false, 734, descriptor_table_protodef_proto3_2ftypedef_2eproto,
    "proto3/typedef.proto",
    &descriptor_table_proto3_2ftypedef_2eproto_once, nullptr, 0, 8,
    schemas, file_default_instances, TableStruct_proto3_2ftypedef_2eproto::offsets,
    file_level_metadata_proto3_2ftypedef_2eproto, file_level_enum_descriptors_proto3_2ftypedef_2eproto,
    file_level_service_descriptors_proto3_2ftypedef_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_proto3_2ftypedef_2eproto_getter() {
  return &descriptor_table_proto3_2ftypedef_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_proto3_2ftypedef_2eproto(&descriptor_table_proto3_2ftypedef_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* User_t_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto3_2ftypedef_2eproto);
  return file_level_enum_descriptors_proto3_2ftypedef_2eproto[0];
}
bool User_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Led_t::_Internal {
 public:
};

Led_t::Led_t(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Led_t)
}
Led_t::Led_t(const Led_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Led_t* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.mac_){}
    , decltype(_impl_.ep_){}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.mac_, &from._impl_.mac_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.status_) -
    reinterpret_cast<char*>(&_impl_.mac_)) + sizeof(_impl_.status_));
  // @@protoc_insertion_point(copy_constructor:Led_t)
}

inline void Led_t::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.mac_){uint64_t{0u}}
    , decltype(_impl_.ep_){0u}
    , decltype(_impl_.status_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Led_t::~Led_t() {
  // @@protoc_insertion_point(destructor:Led_t)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Led_t::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void Led_t::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Led_t::Clear() {
// @@protoc_insertion_point(message_clear_start:Led_t)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.mac_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.status_) -
      reinterpret_cast<char*>(&_impl_.mac_)) + sizeof(_impl_.status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Led_t::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Led_t.name"));
        } else
          goto handle_unusual;
        continue;
      // uint64 mac = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.mac_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ep = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.ep_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool status = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Led_t::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Led_t)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 16;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Led_t.name");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_name(), target);
  }

  // uint64 mac = 17;
  if (this->_internal_mac() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(17, this->_internal_mac(), target);
  }

  // uint32 ep = 18;
  if (this->_internal_ep() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(18, this->_internal_ep(), target);
  }

  // bool status = 19;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(19, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Led_t)
  return target;
}

size_t Led_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Led_t)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 16;
  if (!this->_internal_name().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint64 mac = 17;
  if (this->_internal_mac() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_mac());
  }

  // uint32 ep = 18;
  if (this->_internal_ep() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_ep());
  }

  // bool status = 19;
  if (this->_internal_status() != 0) {
    total_size += 2 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Led_t::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Led_t::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Led_t::GetClassData() const { return &_class_data_; }


void Led_t::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Led_t*>(&to_msg);
  auto& from = static_cast<const Led_t&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Led_t)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_mac() != 0) {
    _this->_internal_set_mac(from._internal_mac());
  }
  if (from._internal_ep() != 0) {
    _this->_internal_set_ep(from._internal_ep());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Led_t::CopyFrom(const Led_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Led_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Led_t::IsInitialized() const {
  return true;
}

void Led_t::InternalSwap(Led_t* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Led_t, _impl_.status_)
      + sizeof(Led_t::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(Led_t, _impl_.mac_)>(
          reinterpret_cast<char*>(&_impl_.mac_),
          reinterpret_cast<char*>(&other->_impl_.mac_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Led_t::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto3_2ftypedef_2eproto_getter, &descriptor_table_proto3_2ftypedef_2eproto_once,
      file_level_metadata_proto3_2ftypedef_2eproto[0]);
}

// ===================================================================

class Sw_t::_Internal {
 public:
};

Sw_t::Sw_t(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Sw_t)
}
Sw_t::Sw_t(const Sw_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Sw_t* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.mac_){}
    , decltype(_impl_.ep_){}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.mac_, &from._impl_.mac_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.status_) -
    reinterpret_cast<char*>(&_impl_.mac_)) + sizeof(_impl_.status_));
  // @@protoc_insertion_point(copy_constructor:Sw_t)
}

inline void Sw_t::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.mac_){uint64_t{0u}}
    , decltype(_impl_.ep_){0u}
    , decltype(_impl_.status_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Sw_t::~Sw_t() {
  // @@protoc_insertion_point(destructor:Sw_t)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Sw_t::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void Sw_t::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Sw_t::Clear() {
// @@protoc_insertion_point(message_clear_start:Sw_t)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.mac_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.status_) -
      reinterpret_cast<char*>(&_impl_.mac_)) + sizeof(_impl_.status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Sw_t::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Sw_t.name"));
        } else
          goto handle_unusual;
        continue;
      // uint32 ep = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.ep_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 mac = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.mac_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool status = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Sw_t::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Sw_t)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 16;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Sw_t.name");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_name(), target);
  }

  // uint32 ep = 17;
  if (this->_internal_ep() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(17, this->_internal_ep(), target);
  }

  // uint64 mac = 18;
  if (this->_internal_mac() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(18, this->_internal_mac(), target);
  }

  // bool status = 19;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(19, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Sw_t)
  return target;
}

size_t Sw_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Sw_t)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 16;
  if (!this->_internal_name().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint64 mac = 18;
  if (this->_internal_mac() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_mac());
  }

  // uint32 ep = 17;
  if (this->_internal_ep() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_ep());
  }

  // bool status = 19;
  if (this->_internal_status() != 0) {
    total_size += 2 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Sw_t::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Sw_t::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Sw_t::GetClassData() const { return &_class_data_; }


void Sw_t::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Sw_t*>(&to_msg);
  auto& from = static_cast<const Sw_t&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Sw_t)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_mac() != 0) {
    _this->_internal_set_mac(from._internal_mac());
  }
  if (from._internal_ep() != 0) {
    _this->_internal_set_ep(from._internal_ep());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Sw_t::CopyFrom(const Sw_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Sw_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sw_t::IsInitialized() const {
  return true;
}

void Sw_t::InternalSwap(Sw_t* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Sw_t, _impl_.status_)
      + sizeof(Sw_t::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(Sw_t, _impl_.mac_)>(
          reinterpret_cast<char*>(&_impl_.mac_),
          reinterpret_cast<char*>(&other->_impl_.mac_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Sw_t::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto3_2ftypedef_2eproto_getter, &descriptor_table_proto3_2ftypedef_2eproto_once,
      file_level_metadata_proto3_2ftypedef_2eproto[1]);
}

// ===================================================================

class Ota_t::_Internal {
 public:
};

Ota_t::Ota_t(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Ota_t)
}
Ota_t::Ota_t(const Ota_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Ota_t* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.check_ota_){}
    , decltype(_impl_.status_){}
    , decltype(_impl_.ack_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.check_ota_, &from._impl_.check_ota_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ack_) -
    reinterpret_cast<char*>(&_impl_.check_ota_)) + sizeof(_impl_.ack_));
  // @@protoc_insertion_point(copy_constructor:Ota_t)
}

inline void Ota_t::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.check_ota_){false}
    , decltype(_impl_.status_){false}
    , decltype(_impl_.ack_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Ota_t::~Ota_t() {
  // @@protoc_insertion_point(destructor:Ota_t)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Ota_t::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Ota_t::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Ota_t::Clear() {
// @@protoc_insertion_point(message_clear_start:Ota_t)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.check_ota_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.ack_) -
      reinterpret_cast<char*>(&_impl_.check_ota_)) + sizeof(_impl_.ack_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Ota_t::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool check_ota = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.check_ota_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool status = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool ack = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.ack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Ota_t::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Ota_t)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool check_ota = 16;
  if (this->_internal_check_ota() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(16, this->_internal_check_ota(), target);
  }

  // bool status = 17;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(17, this->_internal_status(), target);
  }

  // bool ack = 18;
  if (this->_internal_ack() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(18, this->_internal_ack(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Ota_t)
  return target;
}

size_t Ota_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Ota_t)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool check_ota = 16;
  if (this->_internal_check_ota() != 0) {
    total_size += 2 + 1;
  }

  // bool status = 17;
  if (this->_internal_status() != 0) {
    total_size += 2 + 1;
  }

  // bool ack = 18;
  if (this->_internal_ack() != 0) {
    total_size += 2 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Ota_t::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Ota_t::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Ota_t::GetClassData() const { return &_class_data_; }


void Ota_t::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Ota_t*>(&to_msg);
  auto& from = static_cast<const Ota_t&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Ota_t)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_check_ota() != 0) {
    _this->_internal_set_check_ota(from._internal_check_ota());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  if (from._internal_ack() != 0) {
    _this->_internal_set_ack(from._internal_ack());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Ota_t::CopyFrom(const Ota_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Ota_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ota_t::IsInitialized() const {
  return true;
}

void Ota_t::InternalSwap(Ota_t* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Ota_t, _impl_.ack_)
      + sizeof(Ota_t::_impl_.ack_)
      - PROTOBUF_FIELD_OFFSET(Ota_t, _impl_.check_ota_)>(
          reinterpret_cast<char*>(&_impl_.check_ota_),
          reinterpret_cast<char*>(&other->_impl_.check_ota_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Ota_t::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto3_2ftypedef_2eproto_getter, &descriptor_table_proto3_2ftypedef_2eproto_once,
      file_level_metadata_proto3_2ftypedef_2eproto[2]);
}

// ===================================================================

class KeepAlive_t::_Internal {
 public:
};

KeepAlive_t::KeepAlive_t(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KeepAlive_t)
}
KeepAlive_t::KeepAlive_t(const KeepAlive_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  KeepAlive_t* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sender_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.sender_ = from._impl_.sender_;
  // @@protoc_insertion_point(copy_constructor:KeepAlive_t)
}

inline void KeepAlive_t::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sender_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

KeepAlive_t::~KeepAlive_t() {
  // @@protoc_insertion_point(destructor:KeepAlive_t)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void KeepAlive_t::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void KeepAlive_t::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void KeepAlive_t::Clear() {
// @@protoc_insertion_point(message_clear_start:KeepAlive_t)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sender_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeepAlive_t::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .User_t sender = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_sender(static_cast<::User_t>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KeepAlive_t::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KeepAlive_t)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .User_t sender = 1;
  if (this->_internal_sender() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_sender(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KeepAlive_t)
  return target;
}

size_t KeepAlive_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KeepAlive_t)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .User_t sender = 1;
  if (this->_internal_sender() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_sender());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KeepAlive_t::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    KeepAlive_t::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KeepAlive_t::GetClassData() const { return &_class_data_; }


void KeepAlive_t::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<KeepAlive_t*>(&to_msg);
  auto& from = static_cast<const KeepAlive_t&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KeepAlive_t)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_sender() != 0) {
    _this->_internal_set_sender(from._internal_sender());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KeepAlive_t::CopyFrom(const KeepAlive_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KeepAlive_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeepAlive_t::IsInitialized() const {
  return true;
}

void KeepAlive_t::InternalSwap(KeepAlive_t* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.sender_, other->_impl_.sender_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KeepAlive_t::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto3_2ftypedef_2eproto_getter, &descriptor_table_proto3_2ftypedef_2eproto_once,
      file_level_metadata_proto3_2ftypedef_2eproto[3]);
}

// ===================================================================

class Timer_t::_Internal {
 public:
};

Timer_t::Timer_t(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Timer_t)
}
Timer_t::Timer_t(const Timer_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Timer_t* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.day_){}
    , decltype(_impl_.month_){}
    , decltype(_impl_.hour_){}
    , decltype(_impl_.minute_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.day_, &from._impl_.day_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.minute_) -
    reinterpret_cast<char*>(&_impl_.day_)) + sizeof(_impl_.minute_));
  // @@protoc_insertion_point(copy_constructor:Timer_t)
}

inline void Timer_t::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.day_){0u}
    , decltype(_impl_.month_){0u}
    , decltype(_impl_.hour_){0u}
    , decltype(_impl_.minute_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Timer_t::~Timer_t() {
  // @@protoc_insertion_point(destructor:Timer_t)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Timer_t::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Timer_t::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Timer_t::Clear() {
// @@protoc_insertion_point(message_clear_start:Timer_t)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.day_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.minute_) -
      reinterpret_cast<char*>(&_impl_.day_)) + sizeof(_impl_.minute_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Timer_t::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 day = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.day_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 month = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.month_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 hour = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.hour_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 minute = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.minute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Timer_t::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Timer_t)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 day = 15;
  if (this->_internal_day() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(15, this->_internal_day(), target);
  }

  // uint32 month = 16;
  if (this->_internal_month() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(16, this->_internal_month(), target);
  }

  // uint32 hour = 17;
  if (this->_internal_hour() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(17, this->_internal_hour(), target);
  }

  // uint32 minute = 18;
  if (this->_internal_minute() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(18, this->_internal_minute(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Timer_t)
  return target;
}

size_t Timer_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Timer_t)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 day = 15;
  if (this->_internal_day() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_day());
  }

  // uint32 month = 16;
  if (this->_internal_month() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_month());
  }

  // uint32 hour = 17;
  if (this->_internal_hour() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_hour());
  }

  // uint32 minute = 18;
  if (this->_internal_minute() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_minute());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Timer_t::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Timer_t::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Timer_t::GetClassData() const { return &_class_data_; }


void Timer_t::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Timer_t*>(&to_msg);
  auto& from = static_cast<const Timer_t&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Timer_t)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_day() != 0) {
    _this->_internal_set_day(from._internal_day());
  }
  if (from._internal_month() != 0) {
    _this->_internal_set_month(from._internal_month());
  }
  if (from._internal_hour() != 0) {
    _this->_internal_set_hour(from._internal_hour());
  }
  if (from._internal_minute() != 0) {
    _this->_internal_set_minute(from._internal_minute());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Timer_t::CopyFrom(const Timer_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Timer_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Timer_t::IsInitialized() const {
  return true;
}

void Timer_t::InternalSwap(Timer_t* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Timer_t, _impl_.minute_)
      + sizeof(Timer_t::_impl_.minute_)
      - PROTOBUF_FIELD_OFFSET(Timer_t, _impl_.day_)>(
          reinterpret_cast<char*>(&_impl_.day_),
          reinterpret_cast<char*>(&other->_impl_.day_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Timer_t::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto3_2ftypedef_2eproto_getter, &descriptor_table_proto3_2ftypedef_2eproto_once,
      file_level_metadata_proto3_2ftypedef_2eproto[4]);
}

// ===================================================================

class Buffer::_Internal {
 public:
  static const ::Ota_t& ota(const Buffer* msg);
  static const ::Vpn_t& vpn(const Buffer* msg);
  static const ::Timer_t& time(const Buffer* msg);
};

const ::Ota_t&
Buffer::_Internal::ota(const Buffer* msg) {
  return *msg->_impl_.ota_;
}
const ::Vpn_t&
Buffer::_Internal::vpn(const Buffer* msg) {
  return *msg->_impl_.vpn_;
}
const ::Timer_t&
Buffer::_Internal::time(const Buffer* msg) {
  return *msg->_impl_.time_;
}
Buffer::Buffer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Buffer)
}
Buffer::Buffer(const Buffer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Buffer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.led_){from._impl_.led_}
    , decltype(_impl_.sw_){from._impl_.sw_}
    , decltype(_impl_.mac_hub_){}
    , decltype(_impl_.ota_){nullptr}
    , decltype(_impl_.vpn_){nullptr}
    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.sender_){}
    , decltype(_impl_.receiver_){}
    , decltype(_impl_.cotroller_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.mac_hub_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mac_hub_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mac_hub().empty()) {
    _this->_impl_.mac_hub_.Set(from._internal_mac_hub(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_ota()) {
    _this->_impl_.ota_ = new ::Ota_t(*from._impl_.ota_);
  }
  if (from._internal_has_vpn()) {
    _this->_impl_.vpn_ = new ::Vpn_t(*from._impl_.vpn_);
  }
  if (from._internal_has_time()) {
    _this->_impl_.time_ = new ::Timer_t(*from._impl_.time_);
  }
  ::memcpy(&_impl_.sender_, &from._impl_.sender_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.cotroller_) -
    reinterpret_cast<char*>(&_impl_.sender_)) + sizeof(_impl_.cotroller_));
  // @@protoc_insertion_point(copy_constructor:Buffer)
}

inline void Buffer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.led_){arena}
    , decltype(_impl_.sw_){arena}
    , decltype(_impl_.mac_hub_){}
    , decltype(_impl_.ota_){nullptr}
    , decltype(_impl_.vpn_){nullptr}
    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.sender_){0}
    , decltype(_impl_.receiver_){0}
    , decltype(_impl_.cotroller_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.mac_hub_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mac_hub_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Buffer::~Buffer() {
  // @@protoc_insertion_point(destructor:Buffer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Buffer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.led_.~RepeatedPtrField();
  _impl_.sw_.~RepeatedPtrField();
  _impl_.mac_hub_.Destroy();
  if (this != internal_default_instance()) delete _impl_.ota_;
  if (this != internal_default_instance()) delete _impl_.vpn_;
  if (this != internal_default_instance()) delete _impl_.time_;
}

void Buffer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Buffer::Clear() {
// @@protoc_insertion_point(message_clear_start:Buffer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.led_.Clear();
  _impl_.sw_.Clear();
  _impl_.mac_hub_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.ota_ != nullptr) {
    delete _impl_.ota_;
  }
  _impl_.ota_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.vpn_ != nullptr) {
    delete _impl_.vpn_;
  }
  _impl_.vpn_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
  ::memset(&_impl_.sender_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.cotroller_) -
      reinterpret_cast<char*>(&_impl_.sender_)) + sizeof(_impl_.cotroller_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Buffer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string mac_hub = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_mac_hub();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Buffer.mac_hub"));
        } else
          goto handle_unusual;
        continue;
      // .User_t sender = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_sender(static_cast<::User_t>(val));
        } else
          goto handle_unusual;
        continue;
      // .User_t receiver = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_receiver(static_cast<::User_t>(val));
        } else
          goto handle_unusual;
        continue;
      // .User_t cotroller = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_cotroller(static_cast<::User_t>(val));
        } else
          goto handle_unusual;
        continue;
      // .Ota_t ota = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_ota(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Vpn_t vpn = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_vpn(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .Led_t led = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_led(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .Sw_t sw = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_sw(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .Timer_t time = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Buffer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Buffer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string mac_hub = 1;
  if (!this->_internal_mac_hub().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mac_hub().data(), static_cast<int>(this->_internal_mac_hub().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Buffer.mac_hub");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_mac_hub(), target);
  }

  // .User_t sender = 2;
  if (this->_internal_sender() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_sender(), target);
  }

  // .User_t receiver = 3;
  if (this->_internal_receiver() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_receiver(), target);
  }

  // .User_t cotroller = 4;
  if (this->_internal_cotroller() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_cotroller(), target);
  }

  // .Ota_t ota = 16;
  if (this->_internal_has_ota()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::ota(this),
        _Internal::ota(this).GetCachedSize(), target, stream);
  }

  // .Vpn_t vpn = 17;
  if (this->_internal_has_vpn()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::vpn(this),
        _Internal::vpn(this).GetCachedSize(), target, stream);
  }

  // repeated .Led_t led = 18;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_led_size()); i < n; i++) {
    const auto& repfield = this->_internal_led(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(18, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .Sw_t sw = 19;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sw_size()); i < n; i++) {
    const auto& repfield = this->_internal_sw(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(19, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .Timer_t time = 20;
  if (this->_internal_has_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::time(this),
        _Internal::time(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Buffer)
  return target;
}

size_t Buffer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Buffer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Led_t led = 18;
  total_size += 2UL * this->_internal_led_size();
  for (const auto& msg : this->_impl_.led_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Sw_t sw = 19;
  total_size += 2UL * this->_internal_sw_size();
  for (const auto& msg : this->_impl_.sw_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string mac_hub = 1;
  if (!this->_internal_mac_hub().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mac_hub());
  }

  // .Ota_t ota = 16;
  if (this->_internal_has_ota()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ota_);
  }

  // .Vpn_t vpn = 17;
  if (this->_internal_has_vpn()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.vpn_);
  }

  // .Timer_t time = 20;
  if (this->_internal_has_time()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_);
  }

  // .User_t sender = 2;
  if (this->_internal_sender() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_sender());
  }

  // .User_t receiver = 3;
  if (this->_internal_receiver() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_receiver());
  }

  // .User_t cotroller = 4;
  if (this->_internal_cotroller() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_cotroller());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Buffer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Buffer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Buffer::GetClassData() const { return &_class_data_; }


void Buffer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Buffer*>(&to_msg);
  auto& from = static_cast<const Buffer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Buffer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.led_.MergeFrom(from._impl_.led_);
  _this->_impl_.sw_.MergeFrom(from._impl_.sw_);
  if (!from._internal_mac_hub().empty()) {
    _this->_internal_set_mac_hub(from._internal_mac_hub());
  }
  if (from._internal_has_ota()) {
    _this->_internal_mutable_ota()->::Ota_t::MergeFrom(
        from._internal_ota());
  }
  if (from._internal_has_vpn()) {
    _this->_internal_mutable_vpn()->::Vpn_t::MergeFrom(
        from._internal_vpn());
  }
  if (from._internal_has_time()) {
    _this->_internal_mutable_time()->::Timer_t::MergeFrom(
        from._internal_time());
  }
  if (from._internal_sender() != 0) {
    _this->_internal_set_sender(from._internal_sender());
  }
  if (from._internal_receiver() != 0) {
    _this->_internal_set_receiver(from._internal_receiver());
  }
  if (from._internal_cotroller() != 0) {
    _this->_internal_set_cotroller(from._internal_cotroller());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Buffer::CopyFrom(const Buffer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Buffer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Buffer::IsInitialized() const {
  return true;
}

void Buffer::InternalSwap(Buffer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.led_.InternalSwap(&other->_impl_.led_);
  _impl_.sw_.InternalSwap(&other->_impl_.sw_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mac_hub_, lhs_arena,
      &other->_impl_.mac_hub_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Buffer, _impl_.cotroller_)
      + sizeof(Buffer::_impl_.cotroller_)
      - PROTOBUF_FIELD_OFFSET(Buffer, _impl_.ota_)>(
          reinterpret_cast<char*>(&_impl_.ota_),
          reinterpret_cast<char*>(&other->_impl_.ota_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Buffer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto3_2ftypedef_2eproto_getter, &descriptor_table_proto3_2ftypedef_2eproto_once,
      file_level_metadata_proto3_2ftypedef_2eproto[5]);
}

// ===================================================================

class Vpn_t::_Internal {
 public:
};

Vpn_t::Vpn_t(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Vpn_t)
}
Vpn_t::Vpn_t(const Vpn_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Vpn_t* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.mac_){}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.mac_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mac_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mac().empty()) {
    _this->_impl_.mac_.Set(from._internal_mac(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:Vpn_t)
}

inline void Vpn_t::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.mac_){}
    , decltype(_impl_.status_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.mac_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mac_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Vpn_t::~Vpn_t() {
  // @@protoc_insertion_point(destructor:Vpn_t)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vpn_t::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mac_.Destroy();
}

void Vpn_t::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Vpn_t::Clear() {
// @@protoc_insertion_point(message_clear_start:Vpn_t)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mac_.ClearToEmpty();
  _impl_.status_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vpn_t::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string mac = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_mac();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Vpn_t.mac"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vpn_t::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Vpn_t)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_status(), target);
  }

  // string mac = 2;
  if (!this->_internal_mac().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mac().data(), static_cast<int>(this->_internal_mac().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Vpn_t.mac");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_mac(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Vpn_t)
  return target;
}

size_t Vpn_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Vpn_t)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string mac = 2;
  if (!this->_internal_mac().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mac());
  }

  // bool status = 1;
  if (this->_internal_status() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vpn_t::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Vpn_t::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vpn_t::GetClassData() const { return &_class_data_; }


void Vpn_t::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Vpn_t*>(&to_msg);
  auto& from = static_cast<const Vpn_t&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Vpn_t)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_mac().empty()) {
    _this->_internal_set_mac(from._internal_mac());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vpn_t::CopyFrom(const Vpn_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Vpn_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vpn_t::IsInitialized() const {
  return true;
}

void Vpn_t::InternalSwap(Vpn_t* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mac_, lhs_arena,
      &other->_impl_.mac_, rhs_arena
  );
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Vpn_t::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto3_2ftypedef_2eproto_getter, &descriptor_table_proto3_2ftypedef_2eproto_once,
      file_level_metadata_proto3_2ftypedef_2eproto[6]);
}

// ===================================================================

class Vendor_t::_Internal {
 public:
};

Vendor_t::Vendor_t(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Vendor_t)
}
Vendor_t::Vendor_t(const Vendor_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Vendor_t* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.mac_ven_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.mac_ven_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mac_ven_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mac_ven().empty()) {
    _this->_impl_.mac_ven_.Set(from._internal_mac_ven(), 
      _this->GetArenaForAllocation());
  }
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:Vendor_t)
}

inline void Vendor_t::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.mac_ven_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.status_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.mac_ven_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mac_ven_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Vendor_t::~Vendor_t() {
  // @@protoc_insertion_point(destructor:Vendor_t)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vendor_t::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mac_ven_.Destroy();
  _impl_.data_.Destroy();
}

void Vendor_t::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Vendor_t::Clear() {
// @@protoc_insertion_point(message_clear_start:Vendor_t)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mac_ven_.ClearToEmpty();
  _impl_.data_.ClearToEmpty();
  _impl_.status_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vendor_t::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string mac_ven = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_mac_ven();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Vendor_t.mac_ven"));
        } else
          goto handle_unusual;
        continue;
      // string data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Vendor_t.data"));
        } else
          goto handle_unusual;
        continue;
      // bool status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vendor_t::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Vendor_t)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string mac_ven = 1;
  if (!this->_internal_mac_ven().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mac_ven().data(), static_cast<int>(this->_internal_mac_ven().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Vendor_t.mac_ven");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_mac_ven(), target);
  }

  // string data = 2;
  if (!this->_internal_data().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Vendor_t.data");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_data(), target);
  }

  // bool status = 3;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Vendor_t)
  return target;
}

size_t Vendor_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Vendor_t)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string mac_ven = 1;
  if (!this->_internal_mac_ven().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mac_ven());
  }

  // string data = 2;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data());
  }

  // bool status = 3;
  if (this->_internal_status() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vendor_t::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Vendor_t::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vendor_t::GetClassData() const { return &_class_data_; }


void Vendor_t::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Vendor_t*>(&to_msg);
  auto& from = static_cast<const Vendor_t&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Vendor_t)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_mac_ven().empty()) {
    _this->_internal_set_mac_ven(from._internal_mac_ven());
  }
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vendor_t::CopyFrom(const Vendor_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Vendor_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vendor_t::IsInitialized() const {
  return true;
}

void Vendor_t::InternalSwap(Vendor_t* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mac_ven_, lhs_arena,
      &other->_impl_.mac_ven_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Vendor_t::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto3_2ftypedef_2eproto_getter, &descriptor_table_proto3_2ftypedef_2eproto_once,
      file_level_metadata_proto3_2ftypedef_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Led_t*
Arena::CreateMaybeMessage< ::Led_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Led_t >(arena);
}
template<> PROTOBUF_NOINLINE ::Sw_t*
Arena::CreateMaybeMessage< ::Sw_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Sw_t >(arena);
}
template<> PROTOBUF_NOINLINE ::Ota_t*
Arena::CreateMaybeMessage< ::Ota_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Ota_t >(arena);
}
template<> PROTOBUF_NOINLINE ::KeepAlive_t*
Arena::CreateMaybeMessage< ::KeepAlive_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KeepAlive_t >(arena);
}
template<> PROTOBUF_NOINLINE ::Timer_t*
Arena::CreateMaybeMessage< ::Timer_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Timer_t >(arena);
}
template<> PROTOBUF_NOINLINE ::Buffer*
Arena::CreateMaybeMessage< ::Buffer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Buffer >(arena);
}
template<> PROTOBUF_NOINLINE ::Vpn_t*
Arena::CreateMaybeMessage< ::Vpn_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Vpn_t >(arena);
}
template<> PROTOBUF_NOINLINE ::Vendor_t*
Arena::CreateMaybeMessage< ::Vendor_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Vendor_t >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
